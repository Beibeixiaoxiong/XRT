void printPath(Graphlnk& G, int v, int dist[], int path[])
{
//输出path数组中存储的图G从顶点v到其余各顶点的路径和距离
	cout  << G.NodeTable[v].start << "的路由表为" << endl;
	int i, j, k, n = G.numVertices;
	int * d = new int[n];
	for (i = 0; i<n; i++)
	{
		if (i != v)
		{
			j = i;
			k = 0;
			while (j != v)
			{
				d[k++] = j;
				j = path[j];
			}
		//	cout << "顶点" << G.NodeTable[i].start << "的最短路径为：" << G.NodeTable[v].start << " ";
		        
				cout << "目的网络"<<G.NodeTable[d[0]].start<< " ";
				if(k==1) 
				cout<<"直接交付"<<" ";
				else
				cout<<"下一跳"<<G.NodeTable[d[k-1]].start<<" ";

			 cout << "最短路径长度为：" << dist[i] << endl;
		}
	}
	delete[] d;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////Dijkstra最短路径///////////////////////////////////////////////////////////////////
void ShortestPath(Graphlnk& G, int v, int dist[], int path[])
{//Graph是一个带权有向图，本算法建立一个数组，dist[j],0<=j<n;是当前求到的从顶点v到顶点j的最短路径长度，同时用数组path存放求到的最短路径
	int n = G.numVertices;
	bool *S = new bool[n];
	int i, j, k;
	int w, min;
	for (i = 0; i<n; i++)
	{
		dist[i] = G.getWeight(v, i);
		S[i] = false;
		
		if (i != v && dist[i] <100)
			path[i] = v;
		else
		{
			path[i] = -1;
		}
	}
	S[v] = true;
	dist[v] = 0;
	for (i = 0; i<n - 1; i++)
	{
		min = 100;
		int u = v;
		for (j = 0; j<n; j++)
		{
			if (S[j] == false && dist[j] < min)
			{
				u = j;
				min = dist[j];
			}
		}
		S[u] = true;
		for (k = 0; k<n; k++)
		{
			w = G.getWeight(u, k);
			if (S[k] == false && w <100&& dist[u] + w<dist[k])
			{
				dist[k] = dist[u] + w;
				path[k] = u;
			}
		}
	}
	printPath(G, v, dist, path);
}
